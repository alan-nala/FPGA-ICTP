-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity yuv_filter_yuv2rgb_1_Pipeline_YUV2RGB_LOOP_X_YUV2RGB_LOOP_Y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch1_ce0 : OUT STD_LOGIC;
    in_channels_ch1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch2_ce0 : OUT STD_LOGIC;
    in_channels_ch2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    in_channels_ch3_ce0 : OUT STD_LOGIC;
    in_channels_ch3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch1_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch1_ce0 : OUT STD_LOGIC;
    out_channels_ch1_we0 : OUT STD_LOGIC;
    out_channels_ch1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch2_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch2_ce0 : OUT STD_LOGIC;
    out_channels_ch2_we0 : OUT STD_LOGIC;
    out_channels_ch2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_channels_ch3_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    out_channels_ch3_ce0 : OUT STD_LOGIC;
    out_channels_ch3_we0 : OUT STD_LOGIC;
    out_channels_ch3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of yuv_filter_yuv2rgb_1_Pipeline_YUV2RGB_LOOP_X_YUV2RGB_LOOP_Y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv18_12A : STD_LOGIC_VECTOR (17 downto 0) := "000000000100101010";
    constant ap_const_lv18_80 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_const_lv18_199 : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011001";
    constant ap_const_lv17_1FF30 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100110000";
    constant ap_const_lv16_FF9C : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln93_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln96_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_253_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln76_reg_655 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln98_1_fu_326_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln98_1_reg_660 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln98_1_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_reg_665 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_reg_665_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_reg_665_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_reg_665_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_reg_665_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_reg_665_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_1_reg_665_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal D_fu_369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal D_reg_704 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_576_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln106_fu_410_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln106_reg_721 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_6_reg_727 : STD_LOGIC_VECTOR (2 downto 0);
    signal R_fu_471_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal R_reg_732 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_596_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal G_fu_568_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal G_reg_742 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y_fu_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_2_fu_261_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_118 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln76_1_fu_286_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln93_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_4_fu_280_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln98_1_fu_297_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln98_fu_293_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_301_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_fu_309_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln98_fu_317_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln98_fu_323_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln101_fu_341_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C_fu_345_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal E_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_379_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln106_1_fu_390_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln106_2_fu_397_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln106_1_fu_401_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln106_1_fu_401_p2 : signal is "no";
    signal sext_ln106_3_fu_406_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln106_1_fu_386_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_585_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_fu_426_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln104_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln104_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_fu_457_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln106_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_484_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln106_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln106_fu_500_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_fu_491_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_604_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_523_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln105_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln105_fu_554_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln3_fu_545_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_576_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_585_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_596_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_604_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_9ns_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_9s_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_mac_muladd_8s_8s_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component yuv_filter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_9s_9ns_8ns_18_4_1_U43 : component yuv_filter_mac_muladd_9s_9ns_8ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_fu_345_p2,
        din1 => grp_fu_576_p1,
        din2 => grp_fu_576_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_576_p3);

    mac_muladd_8s_9ns_18s_18_4_1_U44 : component yuv_filter_mac_muladd_8s_9ns_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => E_fu_355_p2,
        din1 => grp_fu_585_p1,
        din2 => grp_fu_576_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_585_p3);

    mac_muladd_8s_9s_18s_18_4_1_U45 : component yuv_filter_mac_muladd_8s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => E_fu_355_p2,
        din1 => grp_fu_596_p1,
        din2 => grp_fu_576_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_596_p3);

    mac_muladd_8s_8s_18s_18_4_1_U46 : component yuv_filter_mac_muladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => D_fu_369_p2,
        din1 => grp_fu_604_p1,
        din2 => grp_fu_596_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_604_p3);

    flow_control_loop_pipe_sequential_init_U : component yuv_filter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_122 <= ap_const_lv32_0;
                elsif (((icmp_ln93_fu_234_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_122 <= add_ln93_fu_239_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_fu_118 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    x_fu_118 <= select_ln76_1_fu_286_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_114 <= ap_const_lv16_0;
                elsif (((icmp_ln93_fu_234_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_fu_114 <= y_2_fu_261_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                D_reg_704 <= D_fu_369_p2;
                G_reg_742 <= G_fu_568_p3;
                R_reg_732 <= R_fu_471_p3;
                add_ln106_reg_721 <= add_ln106_fu_410_p2;
                add_ln98_1_reg_660 <= add_ln98_1_fu_326_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                tmp_6_reg_727 <= add_ln106_fu_410_p2(18 downto 16);
                    zext_ln98_1_reg_665(21 downto 0) <= zext_ln98_1_fu_337_p1(21 downto 0);
                    zext_ln98_1_reg_665_pp0_iter4_reg(21 downto 0) <= zext_ln98_1_reg_665(21 downto 0);
                    zext_ln98_1_reg_665_pp0_iter5_reg(21 downto 0) <= zext_ln98_1_reg_665_pp0_iter4_reg(21 downto 0);
                    zext_ln98_1_reg_665_pp0_iter6_reg(21 downto 0) <= zext_ln98_1_reg_665_pp0_iter5_reg(21 downto 0);
                    zext_ln98_1_reg_665_pp0_iter7_reg(21 downto 0) <= zext_ln98_1_reg_665_pp0_iter6_reg(21 downto 0);
                    zext_ln98_1_reg_665_pp0_iter8_reg(21 downto 0) <= zext_ln98_1_reg_665_pp0_iter7_reg(21 downto 0);
                    zext_ln98_1_reg_665_pp0_iter9_reg(21 downto 0) <= zext_ln98_1_reg_665_pp0_iter8_reg(21 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_234_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln96_reg_650 <= icmp_ln96_fu_248_p2;
                select_ln76_reg_655 <= select_ln76_fu_253_p3;
            end if;
        end if;
    end process;
    zext_ln98_1_reg_665(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln98_1_reg_665_pp0_iter4_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln98_1_reg_665_pp0_iter5_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln98_1_reg_665_pp0_iter6_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln98_1_reg_665_pp0_iter7_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln98_1_reg_665_pp0_iter8_reg(63 downto 22) <= "000000000000000000000000000000000000000000";
    zext_ln98_1_reg_665_pp0_iter9_reg(63 downto 22) <= "000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    C_fu_345_p2 <= std_logic_vector(unsigned(zext_ln101_fu_341_p1) + unsigned(ap_const_lv9_1F0));
    D_fu_369_p2 <= (in_channels_ch2_q0 xor ap_const_lv8_80);
    E_fu_355_p2 <= (in_channels_ch3_q0 xor ap_const_lv8_80);
    G_fu_568_p3 <= 
        select_ln105_fu_554_p3 when (or_ln105_fu_562_p2(0) = '1') else 
        trunc_ln3_fu_545_p4;
    R_fu_471_p3 <= 
        select_ln104_fu_457_p3 when (or_ln104_fu_465_p2(0) = '1') else 
        trunc_ln_fu_448_p4;
    add_ln106_1_fu_401_p2 <= std_logic_vector(signed(sext_ln106_2_fu_397_p1) + signed(grp_fu_576_p3));
    add_ln106_fu_410_p2 <= std_logic_vector(signed(sext_ln106_3_fu_406_p1) + signed(sext_ln106_1_fu_386_p1));
    add_ln93_fu_239_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_122) + unsigned(ap_const_lv32_1));
    add_ln98_1_fu_326_p2 <= std_logic_vector(unsigned(add_ln98_fu_317_p2) + unsigned(zext_ln98_fu_323_p1));
    add_ln98_fu_317_p2 <= std_logic_vector(unsigned(tmp_fu_301_p3) + unsigned(tmp_2_fu_309_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln93_fu_234_p2)
    begin
        if (((icmp_ln93_fu_234_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_576_p1 <= ap_const_lv18_12A(9 - 1 downto 0);
    grp_fu_576_p2 <= ap_const_lv18_80(8 - 1 downto 0);
    grp_fu_585_p1 <= ap_const_lv18_199(9 - 1 downto 0);
    grp_fu_596_p1 <= ap_const_lv17_1FF30(9 - 1 downto 0);
    grp_fu_604_p1 <= ap_const_lv16_FF9C(8 - 1 downto 0);
    icmp_ln104_fu_435_p2 <= "1" when (tmp_1_fu_426_p4 = ap_const_lv2_1) else "0";
    icmp_ln105_fu_532_p2 <= "1" when (tmp_4_fu_523_p4 = ap_const_lv2_1) else "0";
    icmp_ln106_fu_479_p2 <= "1" when (signed(tmp_6_reg_727) > signed(ap_const_lv3_0)) else "0";
    icmp_ln93_fu_234_p2 <= "1" when (indvar_flatten_fu_122 = bound) else "0";
    icmp_ln96_fu_248_p2 <= "1" when (y_fu_114 = p_read1) else "0";
    in_channels_ch1_address0 <= zext_ln98_1_fu_337_p1(22 - 1 downto 0);

    in_channels_ch1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            in_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch2_address0 <= zext_ln98_1_reg_665_pp0_iter4_reg(22 - 1 downto 0);

    in_channels_ch2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            in_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_channels_ch3_address0 <= zext_ln98_1_reg_665(22 - 1 downto 0);

    in_channels_ch3_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            in_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln104_fu_465_p2 <= (tmp_3_fu_441_p3 or icmp_ln104_fu_435_p2);
    or_ln105_fu_562_p2 <= (tmp_5_fu_538_p3 or icmp_ln105_fu_532_p2);
    or_ln106_fu_508_p2 <= (tmp_7_fu_484_p3 or icmp_ln106_fu_479_p2);
    out_channels_ch1_address0 <= zext_ln98_1_reg_665_pp0_iter8_reg(22 - 1 downto 0);

    out_channels_ch1_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            out_channels_ch1_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch1_d0 <= R_reg_732;

    out_channels_ch1_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            out_channels_ch1_we0 <= ap_const_logic_1;
        else 
            out_channels_ch1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_address0 <= zext_ln98_1_reg_665_pp0_iter9_reg(22 - 1 downto 0);

    out_channels_ch2_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            out_channels_ch2_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch2_d0 <= G_reg_742;

    out_channels_ch2_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            out_channels_ch2_we0 <= ap_const_logic_1;
        else 
            out_channels_ch2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_address0 <= zext_ln98_1_reg_665_pp0_iter7_reg(22 - 1 downto 0);

    out_channels_ch3_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_channels_ch3_ce0 <= ap_const_logic_1;
        else 
            out_channels_ch3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_channels_ch3_d0 <= 
        select_ln106_fu_500_p3 when (or_ln106_fu_508_p2(0) = '1') else 
        trunc_ln4_fu_491_p4;

    out_channels_ch3_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            out_channels_ch3_we0 <= ap_const_logic_1;
        else 
            out_channels_ch3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln104_fu_457_p3 <= 
        ap_const_lv8_FF when (icmp_ln104_fu_435_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln105_fu_554_p3 <= 
        ap_const_lv8_FF when (icmp_ln105_fu_532_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln106_fu_500_p3 <= 
        ap_const_lv8_FF when (icmp_ln106_fu_479_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln76_1_fu_286_p3 <= 
        x_4_fu_280_p2 when (icmp_ln96_reg_650(0) = '1') else 
        x_fu_118;
    select_ln76_fu_253_p3 <= 
        ap_const_lv16_0 when (icmp_ln96_fu_248_p2(0) = '1') else 
        y_fu_114;
        sext_ln106_1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_379_p3),19));

        sext_ln106_2_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln106_1_fu_390_p3),18));

        sext_ln106_3_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln106_1_fu_401_p2),19));

    shl_ln106_1_fu_390_p3 <= (D_reg_704 & ap_const_lv2_0);
    shl_ln_fu_379_p3 <= (D_reg_704 & ap_const_lv9_0);
    tmp_1_fu_426_p4 <= grp_fu_585_p3(17 downto 16);
    tmp_2_fu_309_p3 <= (trunc_ln98_fu_293_p1 & ap_const_lv8_0);
    tmp_3_fu_441_p3 <= grp_fu_585_p3(17 downto 17);
    tmp_4_fu_523_p4 <= grp_fu_604_p3(17 downto 16);
    tmp_5_fu_538_p3 <= grp_fu_604_p3(17 downto 17);
    tmp_7_fu_484_p3 <= add_ln106_reg_721(18 downto 18);
    tmp_fu_301_p3 <= (trunc_ln98_1_fu_297_p1 & ap_const_lv10_0);
    trunc_ln3_fu_545_p4 <= grp_fu_604_p3(15 downto 8);
    trunc_ln4_fu_491_p4 <= add_ln106_reg_721(15 downto 8);
    trunc_ln98_1_fu_297_p1 <= select_ln76_1_fu_286_p3(12 - 1 downto 0);
    trunc_ln98_fu_293_p1 <= select_ln76_1_fu_286_p3(14 - 1 downto 0);
    trunc_ln_fu_448_p4 <= grp_fu_585_p3(15 downto 8);
    x_4_fu_280_p2 <= std_logic_vector(unsigned(x_fu_118) + unsigned(ap_const_lv16_1));
    y_2_fu_261_p2 <= std_logic_vector(unsigned(select_ln76_fu_253_p3) + unsigned(ap_const_lv16_1));
    zext_ln101_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_ch1_q0),9));
    zext_ln98_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_1_reg_660),64));
    zext_ln98_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_reg_655),22));
end behav;
