//=========================================================//
//     Joint ICTP-IAEA School on FPGA-based SoC and its    //
// Applications to Nuclear and Scientific Instrumentation  //
//                                                         //
//                          Lab                            //
//                   External Interrupt                    //
//                                                         //
//                                                         //
//=========================================================//
//-----------------------------------------------------------
//-- File       : lab_irq_sw.c
//-- Author     : Cristian
//-- Company    : ICTP-MLAB
//-- Created    : 2018-11-08
//-- Last update: 2022-10-14
//-----------------------------------------------------------
//-- Description: Simple 'C' code to read from the siwtches 
//-- and buttons through two GPIO IP Cores (see copyirght)
//-----------------------------------------------------------
//--  
//-----------------------------------------------------------
//-- Revisions  :
//-- Date        Version   Author           Description
//-- 2018-11-08   1.0     Crisitan           Created
//-- 2022-10-14   1.1     Ivan       Ported to Vitis 2022.1
//-----------------------------------------------------------
/* Copyright (c) 2015, EmbeddedCentric.com
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
//////////////////////////////////////////////////////////////////////////////
// Company: EmbeddedCentric.com
// Author:  Ali Aljaani
// Create Date:    08/14/2015
// Description: Zynq SoC Training-lab4
//////////////////////////////////////////////////////////////////////////////

//============================================================================//
#include "xparameters.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "ZedboardOLED.h"
#include "xgpio.h"

//----------  Parameter definitions  ---------- //
#define INTC_DEVICE_ID 		   XPAR_PS7_SCUGIC_0_DEVICE_ID
#define BTNS_DEVICE_ID		   XPAR_AXI_GPIO_0_DEVICE_ID
#define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
#define BTN_INT 			   XGPIO_IR_CH1_MASK // This is the interrupt mask
                                                 // for GPIO channel one
#define DELAY                  10000000

//------ Global declarations ------//
XGpio      BTNInst;
XScuGic    INTCInst;
static int btn_value;
int flag;
int count;

//----------------------------------------------------
// PROTOTYPE FUNCTIONS
//----------------------------------------------------
static void BTN_Intr_Handler(void *baseaddr_p);
static int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
static int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr);

//------------------------------------------------------------------//
//  INTERRUPT SERVICE ROUTINE(ISR)                                  //
//  also know as : INTERRUPT HANDLER FUNCTION                       //
//  - called by the buttons interrupt, performs push buttons read   //
//  - OLED displaying                                               //
//------------------------------------------------------------------//

void BTN_Intr_Handler(void *InstancePtr)
{
	if(flag == 0){

		// Ignore additional button presses
		if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) !=
				BTN_INT)
				return;

		// Disable GPIO interrupts
		XGpio_InterruptDisable(&BTNInst, BTN_INT);

		btn_value = XGpio_DiscreteRead(&BTNInst, 1);
	//	if (btn_value > 0)
			clear_OLED(); // clear the OLED

		switch (btn_value){

			//Checking if BTNC was pressed
			case 1:
				print_message("BOTON CENTRAL",0);
			break;

			//Checking if BTND was pressed
			case 2:
				print_message("BTND pressed..",0);
			break;

			//Checking if BTNL was pressed
			case 4:
				print_message("BTNL pressed..",0);
			break;

			//Checking if BTNR was pressed
			case 8:
				print_message("BTNR pressed..",0);
			break;

			//Checking if BTNU was pressed
			case 16:
				print_message("BTNU pressed..",0);
			break;

			default:
			break;
		}

		// Acknowledge GPIO interrupts
		(void)XGpio_InterruptClear(&BTNInst, BTN_INT);
	
		// Enable GPIO interrupts
		XGpio_InterruptEnable(&BTNInst, BTN_INT);

		flag = 1;

	}

}


//----------------------------------------------------
// main
//----------------------------------------------------
int main (void)
{

	int status;
	unsigned int i;
	char c= 'B';
	//----------------------------------------------------
	// initialize the peripherals & set directions of gpio
	//----------------------------------------------------
	// Initialize Push Buttons
	status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Set all buttons direction to inputs
	XGpio_SetDataDirection(&BTNInst, 1, 0xFF);

	// Initialize interrupt controller
	status = IntcInitFunction(INTC_DEVICE_ID, &BTNInst);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Initialize flag and count
	flag = 0;
	count = 0;

	// Infinite loop going from the letter A to Z
	while(1){
		for (c = 'A'; c <= 'Z'; c++) {
			clear_OLED();
			print_char(c,0,7); //Display single character
			for (i=0;i<=DELAY;i++){
				count = 0;
				flag = 0;
				if(flag == 1){ //If interrupt happened
					count++; //Enable debounce counter
					if(count == 10000000){
						flag = 0; //Reset flag if enough time has passed by
						count = 0;
					}
				}
			}
		}
	}

// Never reached on normal execution
  return (0);
}


//----------------------------------------------------
// interrupt setup functions
//----------------------------------------------------
int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr)
{
	XScuGic_Config *IntcConfig;
	int status;

	// Interrupt controller initialization
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Call interrupt setup function
	status = InterruptSystemSetup(&INTCInst);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Register GPIO interrupt handler
	status = XScuGic_Connect(&INTCInst,
					  	  	 INTC_GPIO_INTERRUPT_ID,
					  	  	 (Xil_ExceptionHandler)BTN_Intr_Handler,
					  	  	 (void *)GpioInstancePtr);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Enable GPIO interrupts
	XGpio_InterruptEnable(GpioInstancePtr, 1);
	XGpio_InterruptGlobalEnable(GpioInstancePtr);

	// Enable GPIO interrupts in the controller
	XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);

	return XST_SUCCESS;
}


int InterruptSystemSetup(XScuGic *XScuGicInstancePtr)
{
	// Register GIC interrupt handler
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 	 	 	 	 	 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
			 	 	 	 	 	 XScuGicInstancePtr);
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}
